# Included Macros
#[include build-sheets.cfg]
[include part-cooling.cfg]
[include heatsoak.cfg]
[include testMovementNoise.cfg]
[include neopixels.cfg]

## TODO: enable these
#[include nozzle-wipe.cfg]


#####################################################################
#   Macros
#####################################################################

## Every Build Plate you want to use needs an Install Macro
[gcode_macro INSTALL_TEXTURED_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="Textured PEI"

[gcode_macro INSTALL_SMOOTH_SHEET]
gcode:
    INSTALL_BUILD_SHEET NAME="Smooth PEI"

[gcode_macro HOME_IF_NEEDED]
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro PARK_REAR]
gcode:
    SAVE_GCODE_STATE NAME=PARK_REAR
    HOME_IF_NEEDED
    ; park the head at the front of the printer
    G90
    G1 X150 Y300 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_REAR

[gcode_macro PARK_CENTER]
gcode:
    SAVE_GCODE_STATE NAME=PARK_CENTER
    HOME_IF_NEEDED
    ; park the head at the front of the printer
    G90
    G1 X150 Y100 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_CENTER

[gcode_macro PARK_FRONT]
gcode:
    SAVE_GCODE_STATE NAME=PARK_FRONT
    HOME_IF_NEEDED
    ; park the head at the front of the printer
    G90
    G1 X150 Y10 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_FRONT

[gcode_macro SAFE_LIFT_Z]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    HOME_IF_NEEDED
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro PARK_FOR_SERVICE]
gcode:
    SAFE_LIFT_Z Z=100
    PARK_FRONT

[gcode_macro WIPE_NOZZLE_TIP]
gcode:
    NOZZLE_SCRUB BRUSH_POSITION=58.00,295.00 BRUSH_SIZE=39,11 WIPE_HEIGHT=1.25 TRAVEL_HEIGHT=10.0 PASSES=3 WIPE_SPEED={60 * 250} 

[gcode_macro SCRUB_NOZZLE_FACE]
gcode:
    NOZZLE_SCRUB BRUSH_POSITION=58.00,295.00 BRUSH_SIZE=39,11 WIPE_HEIGHT=0.0 TRAVEL_HEIGHT=10.0 PASSES=8 WIPE_SPEED={60 * 250}

[gcode_macro G32]
gcode:
    STATUS_HOMING
    BED_MESH_CLEAR

    ; stealth chop tuning process
    # motors off
    ;M84
    ;G4 P200

    # enable motors (this seems to energize the steppers in Klipper and no micro-moves are needed)
    ; SET_STEPPER_ENABLE STEPPER=stepper_x  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_y  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1
    #wait at least 130ms for StealthChop to sense standstill current
    ;G4 P200

    #now proceed to home as normal
    STATUS_HOMING
    HOME_IF_NEEDED
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    STATUS_HOMING
    G28

# [gcode_macro PRINT_WARMUP]
# description: Perform initial homing and heating tasks
# variable_parameter_EXTRUDER_TEMP : 0
# variable_parameter_BED_TEMP : 0
# gcode:
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
#     {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
# 
#     CLEAR_PAUSE
#     #SHOW_BUILD_SHEET
# 
#     M104 S{EXTRUDER_TEMP * 0.75}        ; set extruder temperature to 75%
#     M140 S{BED_TEMP}                    ; set bed temprature
#     M106 S64                            ; Enable the part cooling fan to keep the probe and cooling ducts cool during heat-up
#     G32                                 ; home all axes
#     HOME_IF_NEEDED
#     STATUS_HEATING
#     PARK_CENTER                         ; place tool head in the middle of the print volume for even frame heating
# 
#     # wait for top bed sensor to be in thermal equilibrium:
#     HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor top_bed' CANCEL='CANCEL_PRINT'
# 
# [gcode_macro _PRINT_WARMUP]
# variable_bed_temp: 0
# variable_extruder_temp: 0
# gcode:
#     {% set warmup = printer['gcode_macro _PRINT_WARMUP'] %}
#     PRINT_WARMUP EXTRUDER_TEMP={warmup.extruder_temp} BED_TEMP={warmup.bed_temp}

[gcode_macro PRINT_START]
description: perform calibration and get ready to print
variable_parameter_BEACON_MODEL: 'default'
variable_parameter_MESH_PROFILE: ''
variable_parameter_FILAMENT: ''
variable_parameter_WIPE_NOZZLE: 0
variable_parameter_EXTRUDER_TEMP : 0
variable_parameter_BED_TEMP : 0
gcode:
    {% set MESH_PROFILE = params.MESH_PROFILE|default('')|string %}
    {% if FILAMENT == '' and params.EXTRUDER_TEMP == 0 %}
        { action_respond_info("Filament and Extruder Temp UNDEFINED" | pprint) }
    {% elif FILAMENT == '' %}
        {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
        {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% endif %}

    {% if params.BEACON_MODEL %}
        {% set BEACON_MODEL = params.BEACON_MODEL|string %}
    {% else %}
        {% set BEACON_MODEL = printer.save_variables.variables.beacon_model|default(printer.configfile.settings['beacon'].default_model_name)|string %}
    {% endif %}
    BEACON_MODEL_SELECT NAME={BEACON_MODEL}

    CLEAR_PAUSE
    #SHOW_BUILD_SHEET

    #######
    # This section is a duplicate of what happens in the warmup to guard against old prints that only call PRINT_START
    # generally the printer will pass through this almost instantly
    {% if FILAMENT != '' %}
        PREHEAT_BED
    {% else %}
        M104 S{EXTRUDER_TEMP * 0.75}        ; set extruder temperature to 75%
        M140 S{BED_TEMP}                    ; set bed temprature
    {% endif %}
    M106 S64                            ; Enable the part cooling fan to keep the probe and cooling ducts cool during heat-up

    #######
    # preheat bed only or move beacon_auto_calibrate_z before preheat
    BEACON_AUTO_CALIBRATE_Z

    # wait for bed to reach temperature
    STATUS_HEATING
    {% if FILAMENT != '' %}
        HEAT_BED_AND_WAIT
    {% else %}
        M190 S{BED_TEMP}
    {% endif %}
    #######

    ## Bed Mesh: Scan Method only valid with Eddy or Beacon, etc.
    STATUS_MESHING
    {% if MESH_PROFILE %}
        {action_respond_info("Loading Existing Mesh Profile: %s" % (MESH_PROFILE | pprint | string))}
        BED_MESH_PROFILE LOAD={MESH_PROFILE}
    {% else %}
        {action_respond_info("Profile Not Specified, Calibrating Adaptive Mesh")}
        BED_MESH_CALIBRATE ADAPTIVE=1 PROFILE=adaptive-default
        #BED_MESH_CALIBRATE METHOD=scan ADAPTIVE=1 PROFILE=adaptive-default
    {% endif %}

    {% if params.WIPE_NOZZLE == "1" or 'y' in params %}
        WIPE_NOZZLE_TIP
    {% endif %}

    #APPLY_BUILD_SHEET_ADJUSTMENT

    ; move to the front of the printer to allow user to remove any oozing
    SAFE_LIFT_Z Z=25 F=3000
    PARK_FRONT                          ; Move tool head to front to facilitate ooze cleanup
    STATUS_HEATING
    {% if FILAMENT != '' %}
        HEAT_EXTRUDER_AND_WAIT
    {% else %}
        M109 S{EXTRUDER_TEMP}               ; Wait for nozzle to finish heating
    {% endif %}
    M106 S0                             ; Done waiting, part cooling off and back to slicer control
    #SET_Z_THERMAL_ADJUST ENABLE=1
    #SHOW_BUILD_SHEET

    STATUS_PRINTING
    ## Instead: see build sheet offset settings in variables.cfg
    LINE_PURGE
    #VORON_PURGE

    ; if a callback was supplied to print_start, call it
    {% set print_start_macro = printer['gcode_macro PRINT_START'] %}
    {% if print_start_macro.callback  %}
        {print_start_macro.callback}
    {% endif %}

[gcode_macro _PRINT_START]
variable_mesh_profile: 'default'
variable_beacon_model: ''
variable_filament: ''
variable_wipe_nozzle: 0
variable_extruder_temp: 0
variable_bed_temp: 0
gcode:
    {% set start = printer['gcode_macro _PRINT_START'] %}
    PRINT_START MESH_PROFILE={start.mesh_profile} BEACON_MODEL={start.beacon_model} FILAMENT={start.filament} WIPE_NOZZLE={start.wipe_nozzle} EXTRUDER_TEMP={start.extruder_temp} BED_TEMP={start.bed_temp}

[gcode_macro _SETUP_PRINT_START]
variable_parameter_MESH_PROFILE: 'default'
variable_parameter_BEACON_MODEL: ''
variable_parameter_FILAMENT: ''
variable_parameter_WIPE_NOZZLE: 0
variable_parameter_EXTRUDER_TEMP : 0
variable_parameter_BED_TEMP : 0
gcode:
    # # configure _PRINT_WARMUP variables
    # SET_GCODE_VARIABLE MACRO=_PRINT_WARMUP VARIABLE=extruder_temp VALUE={params.EXTRUDER_TEMP}
    # SET_GCODE_VARIABLE MACRO=_PRINT_WARMUP VARIABLE=bed_temp VALUE={params.BED_TEMP}

    # configure print start
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=mesh_profile VALUE={params.MESH_PROFILE}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=beacon_model VALUE={params.BEACON_MODEL|default(printer.save_variables.variables.beacon_model)}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=filament VALUE={params.FILAMENT}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=wipe_nozzle VALUE={params.WIPE_NOZZLE}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=extruder_temp VALUE={params.EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=bed_temp VALUE={params.BED_TEMP}

[gcode_macro PRINT_END]
description: tasks to rese the printer state and cool everything down.
gcode:
    M400                           ; wait for move buffer to clear
    G92 E0                         ; zero the extruder
    G91                            ; relative positioning
    TURN_OFF_HEATERS
    M107                           ; turn off fan
    STATUS_OFF
    BED_MESH_CLEAR
    #SET_Z_THERMAL_ADJUST ENABLE=0
    SAFE_LIFT_Z Z=10 F=3000.0
    PARK_CENTER
    STATUS_OFF
    # TODO: it would be nice to keep the part cooling fan on until the hot end fan shuts off.

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    STOP_HEAT_SOAK
    TURN_OFF_HEATERS
    M107
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    SAFE_LIFT_Z Z=10 F=3000.0
    PARK_CENTER
    STATUS_OFF
    BED_MESH_CLEAR
    #SET_Z_THERMAL_ADJUST ENABLE=0
    BASE_CANCEL_PRINT
    # reset nozzle offset
    SET_GCODE_OFFSET Z=0 MOVE=1

; catch M600 from Prusa Slicer to allow a manual color change
[gcode_macro M600]
gcode:
    PAUSE
    # TODO: add retract here
    SAFE_LIFT_Z Z=50 F=3000.0
    PARK_FRONT

[gcode_macro PID_CALIBRATE_EXTRUDER]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=250 WRITE_FILE=1

[gcode_macro PID_CALIBRATE_HEATER_BED]
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=100 WRITE_FILE=1

[gcode_macro TEST_PROBE_Z_CORNERS]
gcode:
    SAVE_GCODE_STATE NAME=TEST_PROBE_CORNERS
    G90
    G0 X93 Y25 F18000
    PROBE_ACCURACY
    G0 X93 Y225 F18000
    PROBE_ACCURACY
    G0 X293 Y225 F18000
    PROBE_ACCURACY
    G0 X293 Y25 F18000
    PROBE_ACCURACY
    RESTORE_GCODE_STATE NAME=TEST_PROBE_CORNERS

[gcode_macro DUMP_TEST]
gcode:
    {% set extruder = printer.toolhead.extruder %}
    {action_respond_info("extruder name: %s" % (extruder))}
    {action_respond_info("extruer object: %s" % (printer[extruder] | pprint | string))}
    {action_respond_info("bed temp: %f" % ((printer[extruder]).filament.bed))}
    {action_respond_info("extruder temp: %f" % ((printer[extruder]).filament.extruder))}
    {action_respond_info("nozzle diameter: %f" % ((printer[extruder]).nozzle_diameter))}

[gcode_macro DUMP_PARAMETERS]
gcode:
    {% for name1 in printer %}
        { action_respond_info("printer['%s'] = %s" % (name1, printer[name1] | pprint)) }
    {% endfor %}

[gcode_macro DUMP_PAUSE_STATE]
gcode:
   {action_respond_info("[pause_resume].is_paused = %s" % (printer['pause_resume'].is_paused | string)) }
   {action_respond_info("[virtual_sdcard] = %s" % (printer['virtual_sdcard'] | pprint | string)) }
   
[gcode_macro DUMP_EXTRUDER]
gcode:
   {action_respond_info("printer['extruder'] = %s" % (printer['extruder'] | pprint)) }

[gcode_macro DUMP_EXTRUDER1]
gcode:
   {action_respond_info("printer['extruder1'] = %s" % (printer['extruder1'] | pprint)) }

[gcode_macro DUMP_TOOLHEAD]
gcode:
   {action_respond_info("printer['toolhead'] = %s" % (printer['toolhead'] | pprint)) }

[gcode_macro DUMP_SAVE_VARIABLES]
gcode:
    {% for name2 in printer["save_variables"] %}
        { action_respond_info("printer['%s'].%s = %s" % ("save_variables", name2, printer["save_variables"][name2])) }
    {% else %}
        { action_respond_info("printer['%s'] = %s" % ("save_variables", printer["save_variables"])) }
    {% endfor %}

# this needs access to print start etc.
[include pa-cal.cfg]

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    {% set speed = params.SPEED | default(5 * 60) %}
    {% set purge_distance = params.PURGE | default(75) %}
    HEAT_EXTRUDER_AND_WAIT
    G91
    G1 E50 F{speed}
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro PURGE_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=PURGE_FILAMENT
    {% set speed = params.SPEED | default(5 * 60) %}
    {% set purge_distance = params.PURGE | default(15) %}
    HEAT_EXTRUDER_AND_WAIT
    G91
    G1 E{purge_distance} F{speed}
    RESTORE_GCODE_STATE NAME=PURGE_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
    {% set pull_speed = params.PULL_SPEED | default(5 * 60) %}
    {% set pull_distance = ((params.PULL_DISTANCE | default(15)) | float ) * -1 %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    {% set retract_speed = params.RETRACT_SPEED | default(max_velocity) %}
    {% set retract_distance = ((params.RETRACT_DISTANCE | default(30)) | float) * -1 %}
    HEAT_EXTRUDER_AND_WAIT
    G91
    G1 E{pull_distance} F{pull_speed}
    G1 E{retract_distance} F{retract_speed}
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT

[gcode_macro T0]
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder

[gcode_macro T1]
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder1

[gcode_macro WARM_UP_NOZZLE]
gcode:
    PREHEAT_EXTRUDER

[gcode_macro WARM_UP_BED]
gcode:
    PREHEAT_BED

[gcode_macro FREEZE]
gcode:
    TURN_OFF_HEATERS

[gcode_macro NOZZLE_15]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.15

[gcode_macro NOZZLE_25]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.25

[gcode_macro NOZZLE_40]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.4

[gcode_macro NOZZLE_60]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.6

[gcode_macro NOZZLE_80]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.8

[gcode_macro SET_EXTRUDER_PA]
gcode:
    #{% set flow = (params.FLOW | float) | default(100.0) %}
    {% set extruder = 'extruder' + (params.EXTRUDER | default('')) %}
    {% if extruder == 'extruder0' %}
        {% set extruder = 'extruder' %}
    {% endif %}
    {% set extruder_nozzle_diameter = (printer[extruder]).nozzle_diameter %}
    {% set nozzle = (params.NOZZLE | default(extruder_nozzle_diameter) | float) %}
    # option 1, get the defaukt PA value from the current filament
    {% set advance = params.ADVANCE | default((printer[extruder]).filament.pressure_advance) | float %}
    # option 2, fall back to the default PA value from the config file
    {% if not advance %}
        {% set advance = printer.configfile.config[extruder].pressure_advance %}
    {% endif %}

    {% if nozzle == extruder_nozzle_diameter %}
        SET_PRESSURE_ADVANCE EXTRUDER={extruder} ADVANCE={advance}
        {action_respond_info("Pressure Advance Set: Extruder: %s Nozzle: %f Pressure Advance: %f" % (extruder, nozzle, advance))}
        # TODO: How do we handle per-extruder flow rate?
        # Its not stored per-extruder, its stored in gcode_move
        # * we need a per-extruder setting
        # * we need that setting applied every time there is a tool change.
        #M221 S{flow}
    {% endif %}
