#**********************************************************
#*
#* Orbiter Filament Runout Sensor
#* ------------------------------
#* [Orbiter Filament Sensor V1.2](https://www.orbiterprojects.com/orbiter-filament-sensor/)
#*
#* Macro: FILAMENT_RUNOUT
#*     NOTE: each extruder config file should define its own FILAMENT_RUNOUT macro
#**********************************************************

[gcode_macro FILAMENT_RUNOUT]
gcode:
    M300 S1 P10
    M600
    M300 S1 P10


#####################################################
################# Orbiter Sensor #####################
######################################################
# Source: [github.com:pauloeduardogodoy/Klipper_Pinter.cfg - ObiterSensor.cfg](https://github.com/pauloeduardogodoy/Klipper_Pinter.cfg/blob/main/OrbiterSensor.cfg)

#config file version v2.2.1.(godoy)

# [filament_switch_sensor Orbiter_switch]
# switch_pin: EBB36:FILAMENT_SENSOR
# pause_on_runout: False
# runout_gcode:
#     # RESPOND TYPE=echo MSG="Runout Detected on Filament switch"
#     # LIGHTS_RED
#     # FILAMENT_RUNOUT
# insert_gcode:
#     RESPOND TYPE=echo MSG="Insert Detected on Filament switch"
#     #LIGHTS_GREEN
#     #RESUME
# #event_delay: 1.0
# #   The minimum amount of time in seconds to delay between events.
# #   Events triggered during this time period will be silently
# #   ignored. The default is 3 seconds.
# #pause_delay: 0.5
# #   The amount of time to delay, in seconds, between the pause command
# #   dispatch and execution of the runout_gcode. It may be useful to
# #   increase this delay if OctoPrint exhibits strange pause behavior.
# #   Default is 0.5 seconds.


[respond]
default_type: echo

[delayed_gcode clear_display]
gcode:
    M117 # clear display message
    STATUS_READY

[force_move]
enable_force_move: True



#///////////////////////////Filament Sensor macros/////////////////////////////////////////////////
[gcode_button sensor_fs]
pin: !EBB36:FILAMENT_SENSOR
press_gcode: # sensor released - runnout detected!
  {% if (printer.print_stats.state == "printing") %}  
    #PAUSE # call printer pause macto
    filament_change_state1   
  {% endif %} 

release_gcode: #gcode macro for filament load, sensor pressed
  {% if (printer.print_stats.state != "printing") %}
    STATUS_ALERT LEVEL=WARN DURATION=0
    _FILAMENT_PRELOAD
    FILAMENT_LOAD
    STATUS_ALERT_CLEAR
  {% else %}
    STATUS_ALERT LEVEL=ERROR DURATION=5
    RESPOND TYPE=error MSG="Printing! Can't load filament right now!"
  {% endif %} 
  UPDATE_DELAYED_GCODE ID=clear_changebusy DURATION=2
#********************************************************************************************************


#////////////////////////////////////////Filament Unload macros/////////////////////////////////////////////////
[gcode_button sensor_fu]
pin: !EBB36:FILAMENT_UNLOAD
release_gcode:  # filament unload procedure   
  {% if (printer.print_stats.state != "printing")%} # requires [virtual_sdcard]   
    STATUS_ALERT LEVEL=WARN DURATION=0
    FILAMENT_UNLOAD
    STATUS_ALERT_CLEAR
  {% else %}
    STATUS_ALERT LEVEL=ERROR DURATION=5
    RESPOND TYPE=error MSG="Printing! Can't unload filament right now!"
  {% endif %}
press_gcode: # do not add any macro call here

#**************************************************************************************************************



[delayed_gcode clear_changebusy]
gcode:
    SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=0
    #RESPOND TYPE=error MSG="Clear Load busy!"
    STATUS_READY


[delayed_gcode set_loadbusy]
gcode:
    SET_GCODE_VARIABLE MACRO=FILAMENT_LOAD VARIABLE=loadbusy VALUE=1
    #RESPOND TYPE=error MSG="Set Load busy!"


[delayed_gcode clear_loadbusy]
gcode:
    SET_GCODE_VARIABLE MACRO=FILAMENT_LOAD VARIABLE=loadbusy VALUE=0
    #RESPOND TYPE=echo MSG="Clear Load busy!"
    STATUS_READY

[gcode_macro filament_change_state1]
variable_changebusy: 0
gcode:
  {% if changebusy == 0 %}
    PAUSE # call printer pause macro
    SET_GCODE_VARIABLE MACRO=filament_change_state1 VARIABLE=changebusy VALUE=1
    SAVE_VARIABLE VARIABLE=filament_trigger VALUE=0 # Saving the filament status as EMPTY (godoy)
    RESPOND TYPE=error MSG="Filament runnout!"
    #filament_change_state2     # comment this line if you do not want to automatically unload filament in case there is a runnout detected.
  {% else %}
  {% endif %}

[gcode_macro filament_change_state2]
gcode:
    {% set tool_index = (params.TOOL_INDEX | default(0) | int) %}
    {% set filament_name = printer.extruder.filament.name %}
    {% set filament_temp = printer.extruder.filament.extruder %}
    SET_GCODE_VARIABLE MACRO=FILAMENT_LOAD VARIABLE=loadbusy VALUE=1    
    #PANEL_BEEP # only for panel due
    SAVE_VARIABLE VARIABLE=filament_trigger VALUE=0 # Saving the filament status as EMPTY (godoy)
    RESPOND TYPE=error MSG="Unloading filament..."
    M83
    G92 E0
    # {% if printer[printer.toolhead.extruder].temperature < 185 %} # hardcoded threshold
    {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target == 0) %} # checking for minimum extrusion temperature and temperature target set different than 0
        # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 185)
        RESPOND TYPE=error MSG='{"Hotend heating to %.0f°C!" % (filament_temp|float) }'
        M109 S{filament_temp} T{tool_index} # set temperature and wait
    {% endif %}
    G0 E-5 F3600   #extract filament to cold end
    G4 P2000 # wait for two seconds
    G0 E4.5 F3600 # push the filament back 
    G0 E-5 F3600   #extract filament to cold end
    G0 E-100 F300  # continue extraction slow allow filament to be cooled enough before reaches the gears - Mudei de 60mm para 100mm para garantir a saida toda do filamento (godoy)
    M400
    RESPOND TYPE=error MSG="Load new filament! Wait until is loaded, then resume printing."
    UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2.5 # timing must be set to clear delay plus 0.5s. is due to wait to remove filament before starting load even in case there is a blob at the tip of the extracted filament which woudl trigger the sensor twice
  

[gcode_macro _FILAMENT_PRELOAD]
description: Pre-Load Filament
gcode:    
    SAVE_VARIABLE VARIABLE=filament_trigger VALUE=1 # Saving the filament status as LOAD (godoy)
    M83
    G92 E0 
    M82           # set extruder to absolute mode
    FORCE_MOVE STEPPER=extruder DISTANCE=15 VELOCITY=5 ACCEL=1000  # load filament inside the gears force move needs to be enabled


[gcode_macro FILAMENT_LOAD]
description: Load Filament according to installed filament
variable_loadbusy: 0
variable_parameter_TOOL_INDEX:   None
variable_parameter_LOAD_TEMP:    None
variable_parameter_LOAD_DIST:    None
variable_parameter_WIPE_NOZZLE:  True
gcode:    
    {% set tool_index    = (params.TOOL_INDEX | default(0) | int) %}
    {% set filament_name = printer.extruder.filament.name %}
    {% set filament_temp = printer.extruder.filament.extruder %}
    {% set max_velocity  = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    {% set LOAD_SPEED  = [(printer.save_variables.variables.filament_load_speed|default(max_velocity)|int), 300] | max %}
    {% set LOAD_TEMP     = params.LOAD_TEMP|default(filament_temp)|float %}
    {% set LOAD_DIST     = params.LOAD_DIST|default(printer.save_variables.variables.filament_load_distance)|int %}
    {% set do_clean      = params.WIPE_NOZZLE|default('True')|lower|string %}

    {% if loadbusy == 0 %} # requires [virtual_sdcard] 
        SET_GCODE_VARIABLE MACRO=FILAMENT_LOAD VARIABLE=loadbusy VALUE=1
        SET_GCODE_VARIABLE MACRO=FILAMENT_UNLOAD VARIABLE=unloadbusy VALUE=1
        #{% if printer.extruder.can_extrude|lower != 'true' %} # checking for minimum extrusion temperature
        #    STATUS_NOZZLE_HEATING
        #    #M104 S{LOAD_TEMP} T{tool_index}
        #    HEAT_EXTRUDER_AND_WAIT TOOL_INDEX={tool_index}
        #{% endif %}
        STATUS_NOZZLE_TEMP
        RESPOND TYPE=echo MSG='{"Loading Filament %s" % (filament_name|pprint|string)}'
 
        M82           # set extruder to absolute mode
        G92 E0
        G4 P1000      # wait for two seconds
        # check for extruder ready - hotend temperature is high enough, extrude 50mm then check temperature again. To avoid cold extrusion when filament load was started with hot hotend but temperature set to 0
        RESPOND TYPE=echo MSG='{"Loading... Hotend heating to %.0f°C" % (LOAD_TEMP|float)}'
        HEAT_EXTRUDER_AND_WAIT

        G1 E{LOAD_DIST} F{LOAD_SPEED}  # extrude 200mm - Mudei de 200mm para apenas 100mm para não desperdiçar muito filamento (godoy)
        {% if do_clean == "true" %}
            M400   ; wait for queued print moves
            CLEAN_NOZZLE HOT=True
        {% endif %}
        {% if (printer.print_stats.state != "printing") and (printer.print_stats.state != "paused")%} 
            M400   ; wait for queued print moves
            M104 S0 T{tool_index} # if not printing or paused due to filament change set the extruder temp to 0
        {% elif (printer.print_stats.state == "paused") %} 
            RESUME
            STAUTS_PRINTING
        {% endif %}  
        RESPOND TYPE=command MSG="Filament load complete!"
        UPDATE_DELAYED_GCODE ID=clear_display DURATION=5
        UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2   
        UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
    {% else %}
        RESPOND TYPE=command MSG="Filament already loaded!"
    {% endif %}  
    STATUS_READY


[gcode_macro FILAMENT_UNLOAD]
variable_unloadbusy: 0
variable_parameter_TOOL_INDEX:   None
variable_parameter_UNLOAD_TEMP:  None
variable_parameter_UNLOAD_DIST:  None
variable_parameter_WIPE_NOZZLE:  True
variable_clean_nozzle: False
gcode:    
    {% set tool_index    = (params.TOOL_INDEX | default(0) | int) %}
    {% set filament_name = printer.extruder.filament.name %}
    {% set filament_temp = printer.extruder.filament.extruder %}
    {% set UNLOAD_TEMP   = params.UNLOAD_TEMP | default(filament_temp) | float %}

    {% set max_velocity  = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    {% set UNLOAD_SPEED  = [(printer.save_variables.variables.filament_unload_speed | default(max_velocity) | int),300] | max %}
    {% set UNLOAD_DIST   = printer.save_variables.variables.filament_unload_distance | default(50) | int %}

    {% set pull_distance = params.PULL_DISTANCE | default(5) | float %}
    {% set do_clean      = params.WIPE_NOZZLE | default(clean_nozzle) | lower | string %}
    {% set filament_trigger = printer.save_variables.variables.filament_trigger|int %}

    {% if unloadbusy == 0 and filament_trigger == 1 %} # requires [virtual_sdcard]  
        SET_GCODE_VARIABLE MACRO=FILAMENT_UNLOAD VARIABLE=unloadbusy VALUE=1
        SET_GCODE_VARIABLE MACRO=FILAMENT_LOAD VARIABLE=loadbusy VALUE=1
        BEEP
        SAVE_VARIABLE VARIABLE=filament_trigger VALUE=0 # Saving the filament status as EMPTY (godoy)
        RESPOND TYPE=echo MSG='{"%s Unload Triggered by Button" % (filament_name|pprint|string)}'
        M83
        G92 E0 
        {% if (printer.extruder.can_extrude|lower != 'true') or (printer.extruder.target == 0)%} # checking for minimum extrusion temperature
            # check if temperature is over the minimum extrusion temp. min_extrude_temp must be defined in the extruder config (to about 195)
            RESPOND TYPE=command MSG='{"Hotend Heating to %.0f°C" % (UNLOAD_TEMP|float)}'
            M109 S{UNLOAD_TEMP} T{tool_index} # set temperature and wait
        {% endif %}
        G0 E{pull_distance} F{UNLOAD_SPEED * 10} # push the filament back 
        G4 P500 # wait for two seconds
        G0 E-{pull_distance} F{UNLOAD_SPEED * 10}   #extract filament to cold end
        G0 E-{UNLOAD_DIST} F{UNLOAD_SPEED}  # continue extraction slow allow filament to be cooled enough before reaches the gears

        {% if do_clean == "true" %}
            M400   ; wait for queued print moves
            CLEAN_NOZZLE HOT=True
        {% endif %}
        {% if (printer.print_stats.state != "printing") and (printer.print_stats.state != "paused") %} 
            M400   ; wait for queued print moves
            M104 S0 T{tool_index} 
        {% endif %}
        RESPOND TYPE=command MSG='{"Filament %s Unload Complete!" % (filament_name|pprint|string)}'
        UPDATE_DELAYED_GCODE ID=clear_display DURATION=5
        UPDATE_DELAYED_GCODE ID=clear_unloadbusy DURATION=2
        UPDATE_DELAYED_GCODE ID=clear_loadbusy DURATION=2
    {% else %}      
        RESPOND TYPE=command MSG="Nothing to unload!"
    {% endif %}

[delayed_gcode clear_unloadbusy]
gcode:
    SET_GCODE_VARIABLE MACRO=FILAMENT_UNLOAD VARIABLE=unloadbusy VALUE=0
    #RESPOND TYPE=command MSG='{"Clear Unload busy!"}'
  
[gcode_macro ORBITER_FS_RESET]
gcode:
    RESPOND TYPE=command MSG="Please, make sure there is no filament in the extruder!"
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=10 # 10s apagar a mensagem (godoy)
    SAVE_VARIABLE VARIABLE=filament_trigger VALUE=0

# vim: set ts=4 sts=0 sw=4 et nofen :
