# All customizations are documented in globals.cfg. Just copy a variable from
# there into the section below, and change the value to meet your needs.

[gcode_macro _km_options]
# These are examples of some likely customizations:
# Any sheets in the below list will be available with a configurable offset.
# variable_bed_surfaces: ['creality_texture', 'creality_smooth', creality_pc']
# variable_bed_surfaces: ['texture','smooth','pc',]


# Customize the filament menus (up to 10 entries).
#variable_menu_temperature: [
#  {'name' : 'PLA',  'extruder' : 200.0, 'bed' : 60.0},
#  {'name' : 'PETG', 'extruder' : 230.0, 'bed' : 85.0},
#  {'name' : 'ABS',  'extruder' : 245.0, 'bed' : 110.0, 'chamber' : 60}]

### Filament Change Parameters ###


# Filament loading speed (in mm/m).
variable_load_speed: 400
# Global minimum extruder temp for loading (default: min_extrude_temp + 5).
variable_load_min_temp: 220
# Length (in mm) of filament to load (bowden tubes will be longer).
variable_load_length: 50.0

### Priming Line Parameters ###
# Length of filament (in millimeters) to purge at print start.
variable_start_purge_length: 30
# Length of filament (in millimeters) to prime before drawing purge lines.
variable_start_purge_prime_length: 4.0
# Distance (in millimeters) between the purge lines and the print area.
variable_start_purge_clearance: 5.0

### Octoprint LCD Menu Parameters ###
# Set to False to hide the Octoprint LCD menus.
variable_menu_show_octoprint: False
# Set to False to hide the SD Card LCD menus.
variable_menu_show_sdcard: False


gcode: # This line is required by Klipper.

# Any code you put here will run at klipper startup, after the initialization
# for these macros. For example, you could uncomment the following line to
# automatically adjust your bed surface offsets to account for any changes made
# to your Z endstop or probe offset.

#  ADJUST_SURFACE_OFFSETS

  ADJUST_SURFACE_OFFSETS IGNORE=1
# This line includes all the standard macros.
[include klipper-macros/*.cfg]

# Uncomment to include features that require specific hardware support.
# LCD menu support for features like bed surface selection and pause next layer.
# [include klipper-macros/optional/lcd_menus.cfg]

# Optimized bed leveling
#[include klipper-macros/optional/bed_mesh.cfg]




################################################
# The sections below here are required for the macros to work. If your config
# already has some of these sections you should merge the duplicates into one
# (or if they are identical just remove one of them).
[idle_timeout]
gcode:
  _KM_IDLE_TIMEOUT # This line must be in your idle_timeout section.

[pause_resume]
recover_velocity: 25

[respond]

[save_variables]
filename: ~/printer_data/config/variables.cfg # UPDATE THIS FOR YOUR PATH!!!

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode:
  CANCEL_PRINT

[display_status]

# Uncomment the sections below if Fluidd complains (because it's confused).
#[gcode_macro CANCEL_PRINT]
#rename_existing: CANCEL_PRINT_FAKE_BASE
#gcode: CANCEL_PRINT_FAKE_BASE {rawparams}

##########################
####      PAUSE       ####
##########################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}

##########################
####      RESUME      ####
##########################

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESUME_BASE {get_params}

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE


##########################
##                      ##
##     Nozzle Wipe      ##
##                      ##
##########################
[gcode_macro WIPE_NOZZLE]
gcode:
  {% set repetitions = params.repetitions|int if params.repetitions is defined else 6 %} ; Number of repetitions
  {% set initial_z = printer.toolhead.position.z %} ; Store initial position
  G90 ; Absolute positioning
  G1 X244 Y50 Z3 F6000 ; Move to wipe position
  G1 Y35 F6000 
    {% for i in range(repetitions) %} ; Wipe nozzle back and forth for repetitions
    G91
    G1 Y-35 F8000
    G1 Y+35 F8000
    G90
  {% endfor %}
    G1 Z{initial_z} F5000 ; Return to initial Z height


##############################
##                          ##
##  Park for Print Removal  ##
##                          ##
##############################
[gcode_macro REMOVE_PRINT]
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 100.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  {% set initial_z = printer.toolhead.position.z %} ; Store initial position
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z+10 F900
    G90 ; Absolute positioning
    #G1 Z{z_safe} F900
    G1 X0 Y{y_park} F8000 ; Move Y to park
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


##########################
#### Custom Overrides ####
##########################

# # Override DRAW_PURGE_LINE macro to call a custom nozzle wipe macro
# [gcode_macro DRAW_PURGE_LINE]
# rename_existing: KM_DRAW_PURGE_LINE
# gcode:
#   WIPE_NOZZLE ; Call your WIPE_NOZZLE macro
#   KM_DRAW_PURGE_LINE {rawparams} ; Call the original DRAW_PURGE_LINE macro




