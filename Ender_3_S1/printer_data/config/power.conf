# #
# # [Power control](https://moonraker.readthedocs.io/en/latest/configuration/#power)
# #
# ## via GPIO
# [power printer]
# type: gpio
# pin: !gpiochip0/gpio22
# off_when_shutdown: True
# restart_klipper_when_powered: true
# initial_state: off

#
# [Power - Shelly](https://moonraker.readthedocs.io/en/latest/configuration/#shelly-configuration
#

#[power ShellyPlug]
#type: shelly
#address: 10.57.90.110
##user:
##password:
##output_id:
#off_when_shutdown: False
#on_when_job_queued: True
#locked_while_printing: True
#restart_klipper_when_powered: True
#restart_delay: 3.
#bound_services:

[power Shelly1PM]
type: shelly
address: 10.57.90.75
#user:
#password:
#output_id:
off_when_shutdown: False
on_when_job_queued: True
locked_while_printing: True
restart_klipper_when_powered: True
restart_delay: 3.
bound_services:
##   A newline separated list of services that are "bound" to the state of this
##   device.  When the device is powered on all bound services will be started.
##   When the device is powered off all bound services are stopped.
##
##   The items in this list are limited to those specified in the allow list,
##   see the [machine] configuration documentation for details.  Additionally,
##   the Moonraker service can not be bound to a power device.  Note that
##   service names are case sensitive.
##
##   The default is no services are bound to the device.#


#[power lights]
#type: klipper_device
#object_name: gcode_macro LIGHT_SWITCH
#locked_while_printing: True


# #
# # [Sensor](https://moonraker.readthedocs.io/en/latest/configuration/#sensor)
# #
# # Example configuration for a Shelly Pro 1PM (Gen2) switch with
# # integrated power meter running the Shelly firmware over MQTT.
# [sensor mqtt_powermeter]
# type: mqtt
# name: Powermeter
# # Use a different display name
# state_topic: shellypro1pm-8cb113caba09/status/switch:0
# # The response is a JSON object with a multiple fields that we convert to
# # float values before passing them to Moonraker.
# state_response_template:
#   {% set notification = payload|fromjson %}
#   {set_result("power", notification["apower"]|float)}
#   {set_result("voltage", notification["voltage"]|float)}
#   {set_result("current", notification["current"]|float)}
#   {set_result("energy", notification["aenergy"]["by_minute"][0]|float * 0.000001)}


# vim: set ft=cfg ts=0 sts=0 sw=2 et nofen :
